<[1.1]>-----------------------------------------------------------------------------------------------------------------------------------

CREATE DATABASE PracownicyDB;

USE PracownicyDB;

-- Tabela Ludzie
CREATE TABLE Ludzie 
(
    PESEL CHAR(11) PRIMARY KEY,
    imie VARCHAR(30) NOT NULL,
    nazwisko VARCHAR(30) NOT NULL,
    data_urodzenia DATE NOT NULL,
    plec ENUM('K', 'M') NOT NULL,
    CONSTRAINT chk_pesel CHECK 
    (
        LENGTH(PESEL) = 11 AND
        PESEL REGEXP '^[0-9]+$'
    )
);

-- Tabela Zawody
CREATE TABLE Zawody 
(
    zawod_id INT AUTO_INCREMENT PRIMARY KEY,
    nazwa VARCHAR(50) NOT NULL,
    pensja_min FLOAT NOT NULL CHECK (pensja_min >= 0),
    pensja_max FLOAT NOT NULL CHECK (pensja_max > pensja_min)
);

-- Tabela Pracownicy
CREATE TABLE Pracownicy 
(
    PESEL CHAR(11),
    zawod_id INT,
    pensja FLOAT NOT NULL CHECK (pensja >= 0),
    PRIMARY KEY (PESEL, zawod_id),
    FOREIGN KEY (PESEL) REFERENCES Ludzie(PESEL),
    FOREIGN KEY (zawod_id) REFERENCES Zawody(zawod_id)
);

-- Funkcja na PESEL
DELIMITER //

CREATE FUNCTION GenerujPESEL(data_urodzenia DATE, plec ENUM('K', 'M'))
RETURNS CHAR(11)
DETERMINISTIC
BEGIN
    DECLARE pesel CHAR(11);
    DECLARE rok INT;
    DECLARE miesiac INT;
    DECLARE dzien INT;
    DECLARE liczba_porzadkowa INT;
    DECLARE cyfra_kontrolna INT;
    DECLARE suma INT;

    -- Wyciągnięcie roku, miesiąca, dnia z daty
    SET rok = YEAR(data_urodzenia);
    SET miesiac = MONTH(data_urodzenia);
    SET dzien = DAY(data_urodzenia);

    -- Kodowanie miesiąca w zależności od roku
    IF rok >= 2000 THEN
        SET miesiac = miesiac + 20;
    END IF;

    -- Pierwsze sześć cyfr PESEL
    SET pesel = LPAD(rok % 100, 2, '0') 
              + LPAD(miesiac, 2, '0') 
              + LPAD(dzien, 2, '0');

    -- Generowanie liczby porządkowej w zależności od płci
    IF plec = 'K' THEN
        SET liczba_porzadkowa = FLOOR(RAND() * 500) * 2; -- Parzysta dla kobiet
    ELSE
        SET liczba_porzadkowa = FLOOR(RAND() * 500) * 2 + 1; -- Nieparzysta dla mężczyzn
    END IF;

    SET pesel = CONCAT(pesel, LPAD(liczba_porzadkowa, 4, '0'));

    -- Obliczanie cyfry kontrolnej
    SET suma = 1 * SUBSTRING(pesel, 1, 1) +
               3 * SUBSTRING(pesel, 2, 1) +
               7 * SUBSTRING(pesel, 3, 1) +
               9 * SUBSTRING(pesel, 4, 1) +
               1 * SUBSTRING(pesel, 5, 1) +
               3 * SUBSTRING(pesel, 6, 1) +
               7 * SUBSTRING(pesel, 7, 1) +
               9 * SUBSTRING(pesel, 8, 1) +
               1 * SUBSTRING(pesel, 9, 1) +
               3 * SUBSTRING(pesel, 10, 1);

    SET cyfra_kontrolna = (10 - (suma MOD 10)) MOD 10;
    SET pesel = CONCAT(pesel, cyfra_kontrolna);

    RETURN pesel;
END//

DELIMITER ;

<[1.2]>-----------------------------------------------------------------------------------------------------------------------------------

INSERT INTO Zawody (nazwa, pensja_min, pensja_max)
VALUES
('Polityk', 5000, 15000),
('Nauczyciel', 3000, 7000),
('Lekarz', 6000, 20000),
('Informatyk', 5000, 18000);


INSERT INTO Ludzie (PESEL, imie, nazwisko, data_urodzenia, plec)
VALUES
-- 5 osób niepełnoletnich
(GenerujPESEL('2010-02-01', 'K'), 'Anna', 'Kowalska', '2010-02-01', 'K'),
(GenerujPESEL('2012-03-02', 'M'), 'Jan', 'Nowak', '2012-03-02', 'M'),
(GenerujPESEL('2009-04-01', 'K'), 'Maria', 'Wiśniewska', '2009-04-01', 'K'),
(GenerujPESEL('2011-05-01', 'M'), 'Paweł', 'Zieliński', '2011-05-01', 'M'),
(GenerujPESEL('2013-06-01', 'K'), 'Zofia', 'Kamińska', '2013-06-01', 'K'),

-- 2 osoby pełnoletnie poniżej 60 lat
(GenerujPESEL('1976-02-03', 'M'), 'Krzysztof', 'Kowalski', '1976-02-03', 'M'),
(GenerujPESEL('1982-03-04', 'K'), 'Ewa', 'Nowakowska', '1982-03-04', 'K'),

-- 2 osoby w wieku 60 lat i starsze
(GenerujPESEL('1944-12-01', 'M'), 'Józef', 'Kaczmarek', '1944-12-01', 'M'),
(GenerujPESEL('1945-03-01', 'K'), 'Helena', 'Woźniak', '1945-03-01', 'K');



DELIMITER ##

CREATE OR REPLACE PROCEDURE Przypisz_Zawody()
BEGIN
    -- Deklaracje zmiennych dla kursora
    DECLARE done INT DEFAULT FALSE;
    DECLARE person_id INT;
    DECLARE person_birth_date DATE;
    DECLARE person_gender ENUM('K', 'M');
    DECLARE person_age INT;
    DECLARE chosen_zawod_id INT;
    DECLARE pensja_minimalna FLOAT;
    DECLARE pensja_maxymalna FLOAT;
    DECLARE random_pensja FLOAT;

    -- Kursor do przechodzenia przez tabelę `Ludzie`
    DECLARE ludzie_cursor CURSOR FOR
        SELECT id, data_urodzenia, plec
        FROM Ludzie
        WHERE DATEDIFF(CURDATE(), data_urodzenia) / 365.25 >= 18; -- Tylko osoby pełnoletnie

    -- Handler dla końca kursora
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Otwórz kursor
    OPEN ludzie_cursor;

    ludzie_loop: LOOP
        -- Pobierz dane osoby z kursora
        FETCH ludzie_cursor INTO person_id, person_birth_date, person_gender;

        -- Sprawdź, czy koniec danych
        IF done THEN
            LEAVE ludzie_loop;
        END IF;

        -- Oblicz wiek osoby
        SET person_age = FLOOR(DATEDIFF(CURDATE(), person_birth_date) / 365.25);

        -- Wybierz losowy zawód
        REPEAT
            SELECT zawod_id, pensja_min, pensja_max
            INTO chosen_zawod_id, pensja_minimalna, pensja_maxymalna
            FROM Zawody
            ORDER BY RAND()
            LIMIT 1;

            -- Jeśli zawód to lekarz, sprawdź dodatkowe warunki wiekowe
            IF (chosen_zawod_id = (SELECT zawod_id FROM Zawody WHERE nazwa = 'Lekarz')) THEN
                IF (person_gender = 'M' AND person_age > 65) OR (person_gender = 'K' AND person_age > 60) THEN
                    -- Jeśli warunki wiekowe dla lekarza nie są spełnione, wybierz inny zawód
                    SET chosen_zawod_id = NULL;
                END IF;
            END IF;
        UNTIL chosen_zawod_id IS NOT NULL END REPEAT;

        -- Wylosuj pensję w widełkach dla danego zawodu
        SET random_pensja = pensja_minimalna + RAND() * (pensja_maxymalna - pensja_minimalna);

        -- Wstaw dane do tabeli `Pracownicy`
        INSERT INTO Pracownicy (id_pracownika, zawod_id, pensja)
        VALUES (person_id, chosen_zawod_id, random_pensja);

    END LOOP;

    -- Zamknij kursor
    CLOSE ludzie_cursor;
END ##

DELIMITER ;


<[2.1]>-----------------------------------------------------------------------------------------------------------------------------------

CREATE INDEX idx_plec_imie ON Ludzie(plec, imie);
CREATE INDEX idx_pensja ON Pracownicy(pensja);

EXPLAIN SELECT * FROM Ludzie WHERE plec = 'K' AND imie LIKE 'A%';
EXPLAIN SELECT * FROM Ludzie WHERE plec = 'K';
EXPLAIN SELECT * FROM Ludzie WHERE imie LIKE 'K%';
EXPLAIN SELECT * FROM Pracownicy WHERE pensja < 2000;

EXPLAIN SELECT * 
FROM Pracownicy p 
JOIN Ludzie l ON p.PESEL = l.PESEL
JOIN Zawody z ON p.zawod_id = z.zawod_id
WHERE z.nazwa = 'informatyk' AND l.plec = 'M' AND p.pensja > 10000;

<[3.1]>-----------------------------------------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE PROCEDURE DodajPodwyzke(
    IN nazwa_zawodu VARCHAR(50)
)
BEGIN
    DECLARE przekroczono_widelki BOOLEAN DEFAULT FALSE;

    -- Rozpoczęcie transakcji
    START TRANSACTION;

    -- Sprawdzenie, czy podwyżka dla któregoś pracownika przekroczy widełki
    SELECT TRUE INTO przekroczono_widelki
    FROM Pracownicy p
    JOIN Zawody z ON p.zawod_id = z.zawod_id
    WHERE z.nazwa = nazwa_zawodu
      AND (p.pensja * 1.05) > z.pensja_max;

    -- Jeśli widełki zostały przekroczone, wycofaj transakcję
    IF przekroczono_widelki THEN
        ROLLBACK;
    ELSE
        -- Zwiększ pensje o 5% dla pracowników tego zawodu w ramach widełek
        UPDATE Pracownicy p
        JOIN Zawody z ON p.zawod_id = z.zawod_id
        SET p.pensja = LEAST(p.pensja * 1.05, z.pensja_max)
        WHERE z.nazwa = nazwa_zawodu;

        -- Zatwierdzenie transakcji
        COMMIT;
    END IF;
END$$

DELIMITER ;

<[3.1]>-----------------------------------------------------------------------------------------------------------------------------------

DELIMITER $$

-- Tworzymy procedurę do dynamicznego zapytania
CREATE PROCEDURE LiczbaKobietWZawodzie(
    IN nazwa_zawodu VARCHAR(50)
)
BEGIN
    -- Zmienna na dynamiczne zapytanie
    DECLARE stmt TEXT;

    -- Tworzenie dynamicznego zapytania
    SET stmt = CONCAT(
        'SELECT COUNT(*) AS liczba_kobiet ',
        'FROM Pracownicy p ',
        'JOIN Ludzie l ON p.PESEL = l.PESEL ',
        'JOIN Zawody z ON p.zawod_id = z.zawod_id ',
        'WHERE l.plec = ''K'' AND z.nazwa = ?'
    );

    -- Przygotowanie i wykonanie zapytania
    PREPARE dynamic_query FROM stmt;
    EXECUTE dynamic_query USING nazwa_zawodu;
    DEALLOCATE PREPARE dynamic_query;
END$$

DELIMITER ;

<[4.1]>-----------------------------------------------------------------------------------------------------------------------------------

mysqldump -u root -p PracownicyDB > backupPracownicyDB.sql
DROP DATABASE nazwa_bazy_danych;
mysql -u root -p < backupPracownicyDB.sql

Backup pełny towrzy cały, różnicowy tylko zmiany od ostatniego backupu

<[5.1]>-----------------------------------------------------------------------------------------------------------------------------------
